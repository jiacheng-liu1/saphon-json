<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>SAPhon JSON Automation Ver 0.2</title>
  <link href="scripts/css/bootstrap.min.css" rel="stylesheet">

  <!-- Include JSONEditor library -->
  <script src="scripts/js/jsoneditor.min.js"></script>

  <!-- Include Ajv schema validator library https://ajv.js.org/ -->
  <script src="scripts/js/ajv-validator.js"></script>

  <style>
    .container {
      max-width: 960px;
      margin: 0 auto;
    }

    #saving-indicator {
      visibility: hidden;
      color: green;
      font-weight: bold;
    }

    .modal {
      display: none;
      /* debugging... */
    }

    .modal.active {
      display: block;
    }

    /* Description elements */
    div[data-schematype] :is(small.form-text, p) {
      display: none !important;
    }

    body div.container #show-description:checked~* div[data-schematype] :is(small.form-text, p) {
      display: block !important;
    }
  </style>
</head>

<body>
  <div class="container">
    <input type="checkbox" id="show-description" class="show-description btn btn-secondary btn-sm" />Show Descriptions
    <div class="columns">
      <h1 class="col-md-12">Auto-Saving JSON Editor Example</h1>
    </div>
    <div class="columns">
      <div class="column col-md-12">
        <!-- Bootstrap buttons will automatically apply styles -->
        <button id="restore" class="btn btn-secondary btn-sm">Restore to Default</button>
        <button id="load-json" class="btn btn-secondary btn-sm">Load JSON</button>
        <button id="export-json" class="btn btn-secondary btn-sm">Export JSON</button>
        <button id="toggle-properties" class="btn btn-secondary btn-sm">Toggle Properties</button>
        <input type="file" id="file-input" accept=".json" style="display: none;" />
        <span id="save_status" class="label">No changes yet</span>
        <span id="saving-indicator">Saving...</span>
      </div>
    </div>
    <div class="columns">
      <div class="column col-md-12 je-ready" id="editor_holder" data-theme="bootstrap5"></div>
        <div class='col-5 col-md-5 w-5/12'>
            <label for="je-errors-textarea">
                <span>AJV (JE meta-schema): </span>
                <code id="je-errors-count"></code>
            </label>
            <textarea id='je-errors-textarea'></textarea>

            <br>

            <label for="ajv-errors-textarea">
                <span>AJV (meta-schema-2020-12): </span>
                <code id="ajv-errors-count"></code>
            </label>
            <textarea id='ajv-errors-textarea'></textarea>
        </div>
    </div>
  </div>

  <!-- Confirmation Modal -->
  <div id="confirmation-modal" class="modal">
    <a href="#close" class="modal-overlay" aria-label="Close"></a>
    <div class="modal-container">
      <div class="modal-header">
        <a href="#close" class="btn btn-clear float-right" aria-label="Close"></a>
        <div class="modal-title h5">Confirmation</div>
      </div>
      <div class="modal-body">
        <div class="content">
          <p>Are you sure? This will irreversibly erase all currently saved entries.</p>
        </div>
      </div>
      <div class="modal-footer">
        <button id="confirm-yes" class="btn btn-primary">Yes</button>
        <button id="confirm-no" class="btn btn-secondary">No</button>
      </div>
    </div>
  </div>

  <script ref="scripts/js/bootstrap.min.js"></script>

  <script>
    var editor, hasChanges = false, saveInterval;

    // This is the starting value for the editor
    var starting_value = {
    };


    JSONEditor.defaults.options.theme = 'bootstrap5';

    // Define schema in scope shared by functions.
    let schema = undefined;

    // Function to initialize the editor with custom property disabling logic
    // Variable to track the current state of properties (enabled or disabled)
    let arePropertiesDisabled = true; // Start with properties disabled

    // Function to initialize the editor with property disabling based on state
    function initializeEditor(currentData) {
      // Destroy the existing editor instance if it exists
      if (editor) {
        editor.destroy();
      }

      // Initialize the editor with the current schema
      editor = new JSONEditor(document.getElementById('editor_holder'), {
        ajax: true,
        schema: schema,
        startval: currentData || initialData,
        disable_edit_json: true, // Disable the JSON editor button globally
        disable_properties: arePropertiesDisabled, // Set based on the toggle state
        disable_array_reorder: true,
        disable_collapse: true,
        disable_array_delete_last_row: true,
        enable_array_copy: true,
        disable_array_delete_all_rows: true,
        expand_height: true
      });

      ResizeTextareas();

      // Set change event to indicate changes
      editor.on('change', function () {
        document.getElementById('save_status').textContent = 'Changes detected. Auto-saving in 3 seconds...';
        hasChanges = true;
      });
    }

    // Load saved data from localStorage (if it exists)
    var savedData = localStorage.getItem('editorData');
    var initialData = savedData ? JSON.parse(savedData) : starting_value;

    // Toggle properties button
    document.getElementById('toggle-properties').addEventListener('click', function () {
      // Toggle the state
      arePropertiesDisabled = !arePropertiesDisabled;

      // Re-initialize the editor with the new properties state
      initializeEditor(editor.getValue());
      ResizeTextareas();
    });

    // Load saved data from localStorage (if it exists)
    var savedData = localStorage.getItem('editorData');
    var initialData = savedData ? JSON.parse(savedData) : starting_value;

    /** Load schema locally or from github **/
    //const schemaUrl = 'https://raw.githubusercontent.com/levmichael/saphon/spreadsheet/saphonlang.schema.json';
    const schemaUrl = '/saphonlang.schema.json';

    // Fetch the schema from GitHub
    fetch(schemaUrl)
      .then(response => response.json())
      .then(originalSchema => {
        // Make a deep copy of the original schema to avoid mutations and save to var in outer scope.
        schema = JSON.parse(JSON.stringify(originalSchema));

        // Call initializeEditor to create the editor
        initializeEditor(initialData);
        ResizeTextareas();
        /*
                        // Initialize the JSON Editor with the fetched schema
                        const editor = new JSONEditor(document.getElementById('editor_holder'), {
                            schema: schema
                        });
        
                        // Handle the submit button
                        document.getElementById('submit').addEventListener('click', () => {
                            const json = editor.getValue();
                            document.getElementById('output').textContent = JSON.stringify(json, null, 2);
                        });
        */
        // Handle the reset button
/*
        document.getElementById('reset').addEventListener('click', () => {
          editor.setValue({});
          document.getElementById('output').textContent = '';
        });
*/

        // Hook up the Restore to Default button with confirmation modal
        document.getElementById('restore').addEventListener('click', function () {
          // Show the confirmation modal
          document.getElementById('confirmation-modal').classList.add('active');
        });

        // Event listener for "Yes" button in confirmation modal
        document.getElementById('confirm-yes').addEventListener('click', function () {
          // Proceed with restoring to default
          editor.setValue(starting_value);
          hasChanges = true; // Indicate that changes were made
          // Hide the modal
          document.getElementById('confirmation-modal').classList.remove('active');
          // Clear saved data
          localStorage.removeItem('editorData');
        });

        // Event listener for "No" button in confirmation modal
        document.getElementById('confirm-no').addEventListener('click', function () {
          // Hide the modal without doing anything
          document.getElementById('confirmation-modal').classList.remove('active');
        });

        // Close the modal when clicking outside or on the close button
        var modalOverlays = document.querySelectorAll('#confirmation-modal .modal-overlay, #confirmation-modal .btn-clear');
        modalOverlays.forEach(function (element) {
          element.addEventListener('click', function () {
            document.getElementById('confirmation-modal').classList.remove('active');
          });
        });
      })
      .catch(error => {
        console.error('Error loading schema:', error);
        document.getElementById('output').textContent = 'Error loading schema. Please check the console for more details.';
      });


    // Function to save the editor data to localStorage
    function saveEditorData() {
      validateSchema();
      var currentData = editor.getValue();
      localStorage.setItem('editorData', JSON.stringify(currentData));

      // After saving, indicate that the data has been saved
      document.getElementById('save_status').textContent = 'Data saved!';

      // Hide the saving indicator
      document.getElementById('saving-indicator').style.visibility = 'hidden';
    }

    // Auto-save logic, checking every 3 seconds
    function autoSave() {
      if (hasChanges) {
        // Show saving indicator before saving
        document.getElementById('saving-indicator').style.visibility = 'visible';

        saveEditorData();
        hasChanges = false;
      }
    }

    // Set interval to check for changes every 3 seconds
    saveInterval = setInterval(autoSave, 3000);

    // Helper function to retrieve a schema fragment by its $id
    function getSchemaFragmentById(schema, id) {
      if (schema.$id === id) {
        return schema;
      } else if (typeof schema === "object") {
        for (var key in schema) {
          if (schema.hasOwnProperty(key)) {
            var result = getSchemaFragmentById(schema[key], id);
            if (result) return result;
          }
        }
      }
      return null;
    }

    // This function triggers some ghost events within the textarea entries, initiating the automatic resizing. 

    function ResizeTextareas() {
      // Select all textareas within the JSON editor
      const textareas = document.querySelectorAll('textarea');

      // Loop over each textarea and trigger an 'input' event
      textareas.forEach((textarea) => {
        const event = new Event('change', { 'bubbles': true, 'cancelable': false });
        textarea.dispatchEvent(event);
      });
    }

    document.getElementById('load-json').addEventListener('click', function () {
      // Simulate the file import process, and trigger resize after loading
      document.getElementById('file-input').addEventListener('change', function (event) {
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
          var jsonContent = JSON.parse(e.target.result);

          // Set the loaded JSON content into the editor
          editor.setValue(jsonContent);

          ResizeTextareas();
        };

        if (file) {
          reader.readAsText(file);
        }
      });

      // Trigger the file input click event to open the file dialog
      document.getElementById('file-input').click();
    });


    /*
    // Load JSON from file
    document.getElementById('load-json').addEventListener('click', function () {
      document.getElementById('file-input').click();
    });

    // Handle file input for loading JSON
    document.getElementById('file-input').addEventListener('change', function (event) {
      var file = event.target.files[0];
      var reader = new FileReader();

      reader.onload = function (e) {
        var jsonContent = JSON.parse(e.target.result);
        editor.setValue(jsonContent);
      };

      if (file) {
        reader.readAsText(file);
      }
    });
*/
    // Export JSON functionality
    document.getElementById('export-json').addEventListener('click', function () {
      var jsonContent = JSON.stringify(editor.getValue(), null, 2);
      var blob = new Blob([jsonContent], { type: "application/json" });
      var url = URL.createObjectURL(blob);
      var a = document.createElement('a');
      a.href = url;
      a.download = 'data.json';
      a.click();
      URL.revokeObjectURL(url);
    });

    // Validator
    //var outputTextarea = ace.edit('output-textarea', aceConfig)
    //var schemaTextarea = ace.edit('schema-textarea', aceConfig)
    let ajvErrorsTextarea = document.getElementById('ajv-errors-textarea')
    let jeErrorsTextarea = document.getElementById('je-errors-textarea')
    let ajvErrorsCount = document.querySelector('#ajv-errors-count')
    let jeErrorsCount = document.querySelector('#je-errors-count')
    const ajv = new AjvValidator()

    const validateSchema = () => {
      let errors

      // AJV validation
      ajvErrorsCount.textContent = '0'
      errors = ajv.validate202012(schema)
      ajvErrorsTextarea = JSON.stringify(errors, null, 2)
      ajvErrorsCount.textContent = JSON.stringify(errors.length)
      //schemaTextarea.clearSelection(1)
      //ajvErrorsTextarea.clearSelection(1)

      // JE validation with AJV
      jeErrorsCount.textContent = '0'
      errors = ajv.validateJeMetaSchema(editor.getValue())
      jeErrorsTextarea.value = JSON.stringify(errors, null, 2)
      jeErrorsCount.textContent = JSON.stringify(errors.length)
      //schemaTextarea.clearSelection(1)
      //jeErrorsTextarea.clearSelection(1)
    }

  </script>

</body>

</html>
